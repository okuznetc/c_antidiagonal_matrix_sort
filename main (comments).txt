#include <stdlib.h>     // библиотека, чтобы использовать malloc(), free() и rand()
#include <time.h>       // библиотека, чтобы использовать time()
#include <stdio.h>      // библиотека, чтобы использовать printf() и scanf()

// Объявление своих функций для работы с матрицей, описание функций в конце программы
void m_fill_random(int **A, int n, int m, unsigned int seed);     // функция для заполнения матрицы рандомными числами
void m_print(int **A, int n, int m, int direct);                  // функция для вывода (печати) матрицы на экран
void m_antidiag_sort(int **A, int n, int m);                      // функция выполняющая сортировку побочных диагоналей по возрастанию

int min(int a, int b);          // Функция, выбирающая минимальное целое число из двух данных


int main()                      // НАЧАЛО ВЫПОЛНЕНИЯ ПРОГРАММЫ
{
  int N, M;                     // Переменные для хранения размеров матрицы
  printf("\n\n");               // Печать отступа
  printf("Enter number of matrix rows: "); scanf("%ud", &N);        // Запрос пользователя ввести с клавиатуры число строк матрицы
  printf("Enter number of matrix columns: "); scanf("%ud", &M);     // Запрос пользователя ввести с клавиатуры число столбцов матрицы
  printf("\n\n");               // Печать отступа
  // Следующие две строчки - выделение памяти под матрицу, заданного пользователем размера
  int **A = (int**) malloc(N*sizeof(int*));                           // Выделение памяти для указателей на строчки матрицы
  for(int i=0; i<N; i++) { A[i] = (int*) malloc(M*sizeof(int)); }     // Выделение памяти для столбцов по каждому указателю на строчку

  m_fill_random(A, N, M, time(NULL));    // Вызов функции, заполняющей матрицу рандомными числами, 
  //m_fill_random(A, N, M, 21);    //если последний аргумент заменить на конкретное число, то числа будут рандомные, но одинаковые при каждом запуске

  printf("INITIAL matrix:\n");                    // Вывод на экран фразы INITIAL matrix:
  m_print(A, N, M, 0);                            // Вызов функции,печатающей на экране исходную матрицу
  printf("INITIAL matrix (antidiagonals):\n");    // Вывод на экран фразы INITIAL matrix (antidiagonals):
  m_print(A, N, M, -1);                           // Вызов функции,печатающей на экране диагонали, параллельные побочной диагонали для исходной матрицы

  m_antidiag_sort(A, N, M);             // Вызов функции, выполняющей сортировку по возрастанию побочные диагонали матрицы

  printf("SORTED matrix (antidiagonals):\n");     // Вывод на экран фразы SORTED matrix (antidiagonals):
  m_print(A, N, M, -1);                           // Вызов функции,печатающей на экране диагонали, параллельные побочной диагонали для отсортированной матрицы
  printf("SORTED matrix:\n");                     // Вывод на экран фразы SORTED matrix:
  m_print(A, N, M, 0);                            // Вызов функции,печатающей на экране отсортированную матрицу

  // Слдущие две строчки - отчистка памяти, выделенной для хранения матрицы
  for(int i = 0; i<N; i++) { free(A[i]); }        // Освобождение памяти, по указателям каждой строчки
  free(A);                                        // Освобождение памяти, хранящей указатели на строчки матрицы

  return 0;   
}                                                 // КОНЕЦ ВЫПОЛНЕНИЯ ПРОГРАММЫ

///////////////////////////////////////////////////////////////////

int min(int a, int b)               // Функция, выбирающая минимальное целоечисло из двух данных
{
  return a<b ? a : b;               // Если a меньше b, то возвращаем a, иначе возвращаем b
}

// функция для заполнения матрицы рандомными числами, A - указатель на матрицу, n - число строк, m - число столбцов, seed - число для генерации псевдослучайных чисел
void m_fill_random(int **A, int n, int m, unsigned int seed) 
{
  srand(seed);                            // Установка начального числа для генератора случайных чисел
  for(int i=0; i<n; i++) {        // Цикл по строчкам
    for(int j=0; j<m; j++) {        // Для каждой строчки - цикл по столбцам
      A[i][j] = rand()%201-100;       //Присвоение каждому элементу матрицы случайного числа из диапазона [-100;100]
    }
  }
}

// функция для вывода (печати) матрицы на экран. A - указатель на матрицу, n - число строк, m - число столбцов, direct - способ печати: если direct=0, то печать построчная, если direct=-1, то печать идет по диагоналям параллельным побочной диагонали
void m_print(int **A, int n, int m, int direct)  
{
  switch(direct) {                              // Проверка, чему равно значение переменной direct

    case 0:                                     // Случай direct=0
      for(int i=0; i<n; i++) {            // Цикл по строчкам
        for(int j=0; j<m; j++) {          // Для каждой строчки цикл по столбцам
          printf("%4d\t", A[i][j]);       // Вывод на экран элемента матрицы из текущего столбца текущей строчки
        }
        printf("\n");                     // Перенос курсора на новую строчку
      }
      printf("\n");                       // Перенос курсора на новую строчку
    break;

    case -1:                                    // Случай direct=-1
      for(int k=0; k<n+m-1; k++) {                            // Цикл по всем диагоналям, параллельным побочной, всего их m+n-1
        int min_kn = min(k,n-1), min_km = min(k,m-1);         // Вычисление вспомогательных переменных min_kn и min_km
        for(int i=0 ; i < min_kn + min_km - k + 1; i++) {     // Цикл по элементам диагонали, всего их min(k,n)+min(k,m)-k+1
            printf("%4d\t", A[min_kn-i][k-min_kn+i]);         // Печать текущего элемента диагонали
        }
        printf("\n");                     // Перенос курсора на новую строчку
      }
      printf("\n");                       // Перенос курсора на новую строчку
    break;

  }
}

// функция выполняющая сортировку диагоналей, параллельных побочной по возрастанию.  A - указатель на матрицу, n - число строк, m - число столбцов
void m_antidiag_sort(int **A, int n, int m) {

  int j, min_kn, min_km, cur, irow, icol;                 // Объявление переменных, которые потребуются позже

  for(int k=0; k<n+m-1; k++) {                            // Цикл по всем диагоналям, параллельным побочной, всего их m+n-1
    min_kn = min(k,n-1);                                  // Вспомогательные переменные
    min_km = min(k,m-1);

    for(int i=1 ; i < min_kn + min_km - k + 1; i++) {     // Цикл по элементам диагонали, всего их min(k,n)+min(k,m)-k+1

      // СОРТИРОВКА МЕТОДОМ ВСТАВКИ
      j = i;
      irow = min_kn-j;                                    // Координаты текущего элемента: номер строки
      icol = k-min_kn+j;                                  // Координаты текущего элемента: номер столбца
      cur = A[irow][icol];                                // Текущий элемент текущей диагонали

      while(j>0 && A[irow+1][icol-1] > cur) {             // Поиск места для текущего элемента
        A[irow][icol] = A[irow+1][icol-1];                // Вспомогательные операции: перестановка элементов
        j--;
        irow = min_kn-j;
        icol = k-min_kn+j;
      }

      A[irow][icol] = cur;                                // Вставка текущего элемента на нужную позицию

    }

  }
}

